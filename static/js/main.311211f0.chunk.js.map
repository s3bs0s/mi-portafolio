{"version":3,"sources":["serviceWorker.js","redux/actions/types.js","redux/actions/creators.js","components/TestSass.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["Boolean","window","location","hostname","match","actionsTypes","COUNT","SUM","actionsCreators","sum","type","TestSass","count","useSelector","state","dispatch","useDispatch","actionCreators","className","Eco","onClick","countReducer","action","composeEnchancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCZSC,EANM,CACnBC,MAAO,CACLC,IAAK,QCQMC,EARS,CACtBF,MAAO,CACLG,IAAK,iBAAO,CACVC,KAAML,EAAaC,MAAMC,QCsBhBI,G,MApBE,WAAO,IACdC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,KAAO,eAAtCF,MACFG,EAAWC,cACTV,EAAUW,EAAVX,MAER,OACE,yBAAKY,UAAU,UACb,uBAAGA,UAAU,QAAb,8CAGA,uBAAGA,UAAU,WACTN,EACF,kBAACO,EAAA,EAAD,CACEC,QAAS,kBAAML,EAAST,EAAMG,c,eCFzBY,EATM,SAACP,EAAOQ,GAC3B,OAAQA,EAAOZ,MACb,KAAKL,EAAaC,MAAMC,IACtB,OAPM,SAACe,GAAwB,IAAhBR,EAAe,uDAAP,GAC3B,QAASA,EAMEL,CAAIa,EAAQR,GACrB,QACE,OAAOA,GAAS,ICAhBS,EAAoBtB,OAAOuB,sCAAwCC,IAU1DC,EARDC,YACZC,YAAgB,CACdhB,MAAOS,IARc,CACvBT,MAAO,GAUPW,EAAkBM,YAAgBC,O,MCVpCC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SNoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.311211f0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const actionsTypes = {\r\n  COUNT: {\r\n    SUM: 'SUM'\r\n  }\r\n};\r\n\r\nexport default actionsTypes;","import actionsTypes from './types';\r\n\r\nconst actionsCreators = {\r\n  COUNT: {\r\n    sum: () => ({\r\n      type: actionsTypes.COUNT.SUM\r\n    })\r\n  }\r\n};\r\n\r\nexport default actionsCreators;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Eco } from '@material-ui/icons';\n\nimport actionCreators from '../redux/actions/creators';\nimport './TestSass.scss';\n\nconst TestSass = () => {\n  const { count } = useSelector(state => state, () => {});\n  const dispatch = useDispatch();\n  const { COUNT } = actionCreators;\n\n  return (\n    <div className='header'>\n      <p className='text'>\n        Muy pronto, portafolio de Sebastian Sossa!\n      </p>\n      <p className='dynamic'>\n        { count }\n        <Eco\n          onClick={() => dispatch(COUNT.sum())}\n        />\n      </p>\n    </div>\n  );\n}\n\nexport default TestSass;\n","import actionsTypes from '../actions/types';\r\n\r\n/*\r\n* FunciÃ³n\r\n*/\r\nconst sum = (action, state = {}) => {\r\n  return ++state;\r\n};\r\n\r\nconst countReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case actionsTypes.COUNT.SUM:\r\n      return sum(action, state);\r\n    default:\r\n      return state || 1;\r\n  }\r\n};\r\n\r\nexport default countReducer;","import {\r\n  createStore,\r\n  combineReducers,\r\n  applyMiddleware,\r\n  compose\r\n} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport countReducer from './reducers/count';\r\n\r\nconst stateInitialized = {\r\n  count: 1\r\n}\r\n\r\nconst composeEnchancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  combineReducers({\r\n    count: countReducer\r\n  }),\r\n  stateInitialized,\r\n  composeEnchancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport TestRedux from './components/TestRedux';\nimport TestLocalStorage from './components/TestLocalStorage';\nimport TestSass from './components/TestSass';\nimport store from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <TestSass />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}